// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<FileUpload /> render default 1`] = `
<div>
  <h3>
    File upload
     
  </h3>
  <b>
    Uploaded files
  </b>
  <DataTable
    columns={
      [
        {
          "Header": "File name",
          "accessor": "fileName",
        },
        {
          "Header": "File description",
          "accessor": "fileDescription",
        },
        {
          "Header": "File size",
          "accessor": "fileSize",
        },
      ]
    }
    data={
      [
        {
          "abc": 123,
          "fileSize": "123 B",
        },
        {
          "def": 456,
          "fileSize": "Unknown",
        },
      ]
    }
    itemCount={2}
    tableActions={
      [
        <FileDownload
          files={
            [
              {
                "abc": 123,
                "fileSize": 123,
              },
              {
                "def": 456,
                "fileSize": "will be unknown",
              },
            ]
          }
        />,
      ]
    }
  />
  <Form.Group
    isInValid={true}
  >
    <Dropzone
      accept={
        {
          "*": [
            ".pdf",
            ".jpg",
          ],
        }
      }
      maxSize={123456}
      onProcessUpload={[MockFunction onProcessUpload]}
      progressVariant="bar"
    />
  </Form.Group>
</div>
`;

exports[`<FileUpload /> render empty on studentTraining 1`] = `null`;

exports[`<FileUpload /> render empty when file upload is not enabled 1`] = `null`;

exports[`<FileUpload /> render extra columns when activeStepName is submission 1`] = `
<div>
  <h3>
    File upload
     
  </h3>
  <b>
    Uploaded files
  </b>
  <DataTable
    columns={
      [
        {
          "Header": "File name",
          "accessor": "fileName",
        },
        {
          "Header": "File description",
          "accessor": "fileDescription",
        },
        {
          "Header": "File size",
          "accessor": "fileSize",
        },
        {
          "Cell": [Function],
          "Header": "Actions",
          "accessor": "actions",
        },
      ]
    }
    data={
      [
        {
          "abc": 123,
          "fileSize": "123 B",
        },
        {
          "def": 456,
          "fileSize": "Unknown",
        },
      ]
    }
    itemCount={2}
    tableActions={
      [
        <FileDownload
          files={
            [
              {
                "abc": 123,
                "fileSize": 123,
              },
              {
                "def": 456,
                "fileSize": "will be unknown",
              },
            ]
          }
        />,
      ]
    }
  />
  <Form.Group
    isInValid={true}
  >
    <Dropzone
      accept={
        {
          "*": [
            ".pdf",
            ".jpg",
          ],
        }
      }
      maxSize={123456}
      onProcessUpload={[MockFunction onProcessUpload]}
      progressVariant="bar"
    />
  </Form.Group>
</div>
`;

exports[`<FileUpload /> render without dropzone and confirm modal when isReadOnly 1`] = `
<div>
  <h3>
    File upload
     
  </h3>
  <FilePreview
    defaultCollapsePreview={false}
  />
  <b>
    Uploaded files
  </b>
  <DataTable
    columns={
      [
        {
          "Header": "File name",
          "accessor": "fileName",
        },
        {
          "Header": "File description",
          "accessor": "fileDescription",
        },
        {
          "Header": "File size",
          "accessor": "fileSize",
        },
      ]
    }
    data={
      [
        {
          "abc": 123,
          "fileSize": "123 B",
        },
        {
          "def": 456,
          "fileSize": "Unknown",
        },
      ]
    }
    itemCount={2}
    tableActions={
      [
        <FileDownload
          files={
            [
              {
                "abc": 123,
                "fileSize": 123,
              },
              {
                "def": 456,
                "fileSize": "will be unknown",
              },
            ]
          }
        />,
      ]
    }
  />
</div>
`;

exports[`<FileUpload /> render without file preview if uploadedFiles are empty and isReadOnly 1`] = `
<div>
  <h3>
    File upload
     
  </h3>
  <b>
    Uploaded files
  </b>
  <DataTable
    columns={
      [
        {
          "Header": "File name",
          "accessor": "fileName",
        },
        {
          "Header": "File description",
          "accessor": "fileDescription",
        },
        {
          "Header": "File size",
          "accessor": "fileSize",
        },
      ]
    }
    data={[]}
    itemCount={0}
    tableActions={
      [
        <FileDownload
          files={[]}
        />,
      ]
    }
  />
</div>
`;

exports[`<FileUpload /> render without header 1`] = `
<div>
  <b>
    Uploaded files
  </b>
  <DataTable
    columns={
      [
        {
          "Header": "File name",
          "accessor": "fileName",
        },
        {
          "Header": "File description",
          "accessor": "fileDescription",
        },
        {
          "Header": "File size",
          "accessor": "fileSize",
        },
      ]
    }
    data={
      [
        {
          "abc": 123,
          "fileSize": "123 B",
        },
        {
          "def": 456,
          "fileSize": "Unknown",
        },
      ]
    }
    itemCount={2}
    tableActions={
      [
        <FileDownload
          files={
            [
              {
                "abc": 123,
                "fileSize": 123,
              },
              {
                "def": 456,
                "fileSize": "will be unknown",
              },
            ]
          }
        />,
      ]
    }
  />
  <Form.Group
    isInValid={true}
  >
    <Dropzone
      accept={
        {
          "*": [
            ".pdf",
            ".jpg",
          ],
        }
      }
      maxSize={123456}
      onProcessUpload={[MockFunction onProcessUpload]}
      progressVariant="bar"
    />
  </Form.Group>
</div>
`;

exports[`createFileActionCell should return a function that is an action cell 1`] = `
<ActionCell
  abc={123}
  disabled={false}
  onDeletedFile={[MockFunction]}
/>
`;
